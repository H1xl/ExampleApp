@page "/"
@using ExampleApp.Domen.Models
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient Http
@inject IDialogService DialogService
@rendermode InteractiveServer

<MudPopoverProvider />
<MudDialogProvider Position="DialogPosition.Center" />
<MudSnackbarProvider />

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.Add" OnClick="@(() => CreateDialog())" />
    <MudDataGrid T="User" Items="@AllUsers">
        <Columns>
            <PropertyColumn Property="x => x.Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name" />
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@((e) => UpdateDialog(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Delete" OnClick="@((e) => DeleteDialog(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

}

@code {
    private List<User> AllUsers = new List<User>();
    private bool isLoading = true;
    public User User = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7032/api/Users");
            if (response.IsSuccessStatusCode)
            {
                AllUsers = await response.Content.ReadFromJsonAsync<List<User>>();
                isLoading = false;
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task UpdateDialog(User user)
    {
        var parameters = new DialogParameters<UpdateUserDialog> { { x => x.User, user } };

        var dialog = await DialogService.ShowAsync<UpdateUserDialog>("Изменение имени", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            user.Name = result.Data.ToString();
            var response = await Http.PutAsJsonAsync<User>("https://localhost:7032/api/Users/UpdateUser", user);
        }
    }

    async Task DeleteDialog(User user)
    {
        var parameters = new DialogParameters<DeleteUserDialog>();
        parameters.Add(x => x.ContentText, $"Вы действительно хотите удалить пользователя с имененем {user.Name}");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteUserDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            var response = await Http.DeleteAsync($"https://localhost:7032/api/Users/DeleteUser/{user.Id}");
            AllUsers.RemoveAll(x => x.Id == user.Id);
        }
    }

    async Task CreateDialog()
    {
        //var parameters = new DialogParameters<CreateUserDialog>();
        var dialog = await DialogService.ShowAsync<CreateUserDialog>("Создание нового пользователя");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            User user = new();
            if (AllUsers.Count != 0) { user.Id = AllUsers[AllUsers.Count - 1].Id + 1; }
            else { user.Id = 1; }
            user.Name = result.Data.ToString();
            var response = await Http.PostAsJsonAsync<User>("https://localhost:7032/api/Users", user);
            AllUsers.Add(user);
        }
    }
}